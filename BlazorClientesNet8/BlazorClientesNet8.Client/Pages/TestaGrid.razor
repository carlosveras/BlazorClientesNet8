@page "/testagrid"

@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IDialogService DialogService

@* @rendermode InteractiveAuto *@
@rendermode InteractiveServer

<h1>COLABORADORES TESTA GRID</h1>
<br />

<style>

    .tooltip .tooltipazul {
        visibility: hidden;
        display: block;
        text-align: center;
        position: absolute;
        text-align: center;
        background-color: green;
        color: white;
        padding: 5px;
        border-radius: 5px;
        z-index: 10;
    }


    .tooltip:hover .tooltipazul {
        visibility: visible;
    }
</style>


<MudDialogProvider Position="DialogPosition.Center" />

<MudButton Size="@Size.Small" @onclick="Abrir" Variant="Variant.Filled" Color="Color.Primary">Novo Colaborador</MudButton>
<MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Href="/">Voltar</MudButton>


<br />
<br />

<MudTable ServerData="@(new Func<TableState, Task<TableData<Colaborador>>>(ServerReload))"
          Dense="true" @ref="table" Hover="true" Breakpoint="Breakpoint.Sm">
    <ToolBarContent>

        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="nome" T="Colaborador">Nome</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="departamento" T="Colaborador">Departamento</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="admissao" T="Colaborador">Admissao</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="cargo" T="Colaborador">Cargo</MudTableSortLabel></MudTh>

    </HeaderContent>
    <RowTemplate>


        <MudTooltip Class="mud-tooltip mud-tooltip-default tooltipazul" Placement="Placement.Top">
            <MudTd DataLabel="nome">@context.NomeCompleto</MudTd>
        </MudTooltip>
        <MudTd DataLabel="departamento">@context.Departamento.NomeDepartamento</MudTd>
        <MudTd DataLabel="admissao">@context.DataAdmissao.ToShortDateString()</MudTd>
        <MudTd DataLabel="cargo">@context.Cargo</MudTd>

        <MudIconButton Icon="@Icons.Material.Filled.AddChart" Title="EDITAR" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
        <MudIconButton Icon="@Icons.Material.Filled.Person" Title="DETALHES" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" />
        <MudIconButton Icon="@Icons.Material.Filled.PersonRemove" Title="DEMITIR" Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Small" OnClick="@((e)=> Demitir(context.Id))" />
        <MudIconButton Icon="@Icons.Material.Filled.AddChart" Title="REQUISICOES" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" HRef="@($"/requisicoesdocolaborador/{context.Id}")" />
        <MudIconButton Icon="@Icons.Material.Filled.PersonAddDisabled" Title="DESABILITAR" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@((e)=> Desabilitar(context.Id))" />
    </RowTemplate>


    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudText>Currently hovered: @(currentlyHoveredElement)</MudText>

<MudTooltip Text="Secondary" Color="Color.Secondary" Placement="Placement.Top">
    <MudButton>Currently hovered: @(currentlyHoveredElement)</MudButton>
</MudTooltip>

@code {
    private IEnumerable<Colaborador> pagedData;
    private MudTable<Colaborador> table;

    private string abcd = null;
    private int totalItems;
    private string searchString = null;

    private string currentlyHoveredElement;
    private string lastHoveredElement;

    private async Task<TableData<Colaborador>> ServerReload(TableState state)
    {
        IEnumerable<Colaborador> data = await _colaboradorService.GetAllColaboradoresAsync();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.NomeCompleto.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Departamento.NomeDepartamento.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Cargo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if ($"{element.DataAdmissao}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nome":
                data = data.OrderByDirection(state.SortDirection, o => o.NomeCompleto);
                break;
            case "departamento":
                data = data.OrderByDirection(state.SortDirection, o => o.Departamento.NomeDepartamento);
                break;
            case "admissao":
                data = data.OrderByDirection(state.SortDirection, o => o.DataAdmissao);
                break;
            case "cargo":
                data = data.OrderByDirection(state.SortDirection, o => o.Cargo);
                break;

        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Colaborador>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Dialog>("Simple Dialog", options);
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void Abrir()
    {
        var parameters = new DialogParameters<CadastrarColaborador>();

        DialogService.Show<CadastrarColaborador>();

    }

    private void Desabilitar(int colaboradorId)
    {
        var parameters = new DialogParameters<DesabilitarColaborador>();
        parameters.Add(x => x.colaboradorId, colaboradorId);

        DialogService.Show<DesabilitarColaborador>("", parameters);

    }

    private void Demitir(int colaboradorId)
    {
        var parameters = new DialogParameters<Colabs.DemitirColaborador>();
        parameters.Add(x => x.colaboradorId, colaboradorId);

        DialogService.Show<Colabs.DemitirColaborador>("", parameters);
    }

    public void RowMouseEnterEvent(TableRowHoverEventArgs<Colaborador> eventArgs)
    {
        currentlyHoveredElement = eventArgs.Item.Id.ToString();
    }


    private void RowMouseLeaveEvent(TableRowHoverEventArgs<Colaborador> eventArgs)
    {
        currentlyHoveredElement = "";
        lastHoveredElement = eventArgs.Item.Id.ToString();
    }

}