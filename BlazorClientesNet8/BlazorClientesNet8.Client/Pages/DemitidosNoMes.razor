@page "/demitidosnomes"
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IDialogService DialogService

@rendermode InteractiveServer

<h1>Usuarios Desligados Neste Mes</h1>
<br />
<MudDialogProvider Position="DialogPosition.Center" />


<MudButton Size="@Size.Small" @onclick="Abrir" Variant="Variant.Filled" Color="Color.Primary">Desligar Usuario</MudButton>
<MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Href="/">Voltar</MudButton>


<br />
<br />

<MudTable ServerData="@(new Func<TableState, Task<TableData<Colaborador>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>

        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="nome" T="Colaborador">Nome</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="departamento" T="Colaborador">Departamento</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="demissao" T="Colaborador">Demissao</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="cargo" T="Colaborador">Cargo</MudTableSortLabel></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="nome">@context.NomeCompleto</MudTd> 
        <MudTd DataLabel="departamento">@context.Departamento.NomeDepartamento</MudTd>
        <MudTd DataLabel="demissao">@context.DataFinal.ToShortDateString()</MudTd>
        <MudTd DataLabel="cargo">@context.Cargo</MudTd>

        <MudIconButton Icon="@Icons.Material.Filled.Person" Title="DETALHES" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" />
        <MudIconButton Icon="@Icons.Material.Filled.AddChart" Title="REQUISICOES" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" HRef="@($"/requisicoesdocolaborador/{context.Id}")" />
    </RowTemplate>


    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Colaborador> pagedData;
    private MudTable<Colaborador> table;

    private string abcd = null;
    private int totalItems;
    private string searchString = null;

    private async Task<TableData<Colaborador>> ServerReload(TableState state)
    {
        IEnumerable<Colaborador> data = await _colaboradorService.GetAllColaboradoresFiredOnMonthAsync();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.NomeCompleto.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Departamento.NomeDepartamento.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Cargo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if ($"{element.DataAdmissao}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nome":
                data = data.OrderByDirection(state.SortDirection, o => o.NomeCompleto);
                break;
            case "departamento":
                data = data.OrderByDirection(state.SortDirection, o => o.Departamento.NomeDepartamento);
                break;
            case "admissao":
                data = data.OrderByDirection(state.SortDirection, o => o.DataAdmissao);
                break;
            case "cargo":
                data = data.OrderByDirection(state.SortDirection, o => o.Cargo);
                break;

        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Colaborador>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Dialog>("Simple Dialog", options);
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void Abrir()
    {
        var parameters = new DialogParameters<CadastrarColaborador>();

        DialogService.Show<CadastrarColaborador>();

    }

    private void Desabilitar(int colaboradorId)
    {
        var parameters = new DialogParameters<DesabilitarColaborador>();
        parameters.Add(x => x.colaboradorId, colaboradorId);

        DialogService.Show<DesabilitarColaborador>("", parameters);

    }

    private void Demitir(int colaboradorId)
    {
        var parameters = new DialogParameters<Colabs.DemitirColaborador>();
        parameters.Add(x => x.colaboradorId, colaboradorId);

        DialogService.Show<Colabs.DemitirColaborador>("", parameters);
    }




}